{"version":3,"sources":["actions/TopNewsActionTypes.ts","actions/FetchActionTypes.ts","reducers/TopNewsReducer.ts","reducers/store.ts","data/NewsFactory.ts","actions/FetchActions.tsx","components/LoadingDots.tsx","components/NewsGrid.tsx","components/TopNews.tsx","container/TopNewsContainer.tsx","actions/TopNewsActions.ts","components/Header.tsx","container/HeaderContainer.tsx","index.tsx"],"names":["TopNewsActionTypes","FetchActionTypes","initState","loading","error","undefined","params","country","category","q","page","pageSize","newsArr","endOfNews","reducer","state","arguments","length","action","type","LOAD_TOP_NEWS_SUCCESS","Object","objectSpread","concat","LOAD_TOP_NEWS_FAIL","err","SET_LOADING","value","SET_ERROR","SET_PARAMS","RESET_TOP_NEWS","store","createStore","combineReducers","TopNews","applyMiddleware","thunk","NewsFactory","netNews","sourceId","source","id","sourceName","name","author","title","description","url","urlToImage","publishedAt","moment","content","netNewsArr","_this","this","map","createNewsFromNet","axios","defaults","headers","common","process","FetchActions","loadTopNewsArr","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","_loadTopNewsArrStart","get","then","response","createNewsArrayFromNet","data","articles","_loadTopNewsArrSucces","catch","_loadTopNewsArrFail","stop","_x","apply","LOAD_TOP_NEWS_START","LoadingDots","react_default","createElement","className","NewsGrid","props","news","href","src","alt","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadMore","_this$props","loadNews","_this$props2","_this$props3","waterFalls","Array","fill","e","i","waterFall","key","index","components_NewsGrid","components_LoadingDots","onClick","React","Component","topNewAction","TopNewsActionos","fetchActions","setLoading","setError","setParams","resetTopNews","loadTopNews","t0","mapDispatchToProps","resetNews","connect","Header","toUpperCase","countryName","tw","rootElement","document","getElementById","render","es","HeaderContainer","TopNewsContainer"],"mappings":"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","file":"static/js/main.6eb08efc.chunk.js","sourcesContent":["export enum TopNewsActionTypes {\n  SET_LOADING = 'TopNews#SetLoading',\n  SET_ERROR = 'TopNews#SetError',\n  SET_PARAMS = 'TopNews#SetParams',\n  RESET_TOP_NEWS = 'TopNews#ResetNews'\n}\n","export enum FetchActionTypes {\n  LOAD_TOP_NEWS_START = 'Fetch#LoadTopNewsStart',\n  LOAD_TOP_NEWS_SUCCESS = 'Fetch#LoadTopNewsSuccess',\n  LOAD_TOP_NEWS_FAIL = 'Fetch#LoadTopNewsFail',\n}\n","import { News } from '../data/News';\nimport { Action } from 'redux';\nimport { TopNewsActionTypes } from '../actions/TopNewsActionTypes';\nimport { BooleanAction, ErrorAction } from '../types/base.type';\nimport { PartialTopNewsParamsAction } from '../actions/TopNewsActions';\nimport { FetchActionTypes } from '../actions/FetchActionTypes';\nimport { NewsArrAction } from '../actions/FetchActions';\n\nexport interface TopNewsParams {\n  country: string;\n  category: string;\n  q: string;\n  page: number;\n  pageSize: number;\n}\n\nexport interface TopNewsState {\n  loading: boolean;\n  error?: Error;\n  params: TopNewsParams;\n  newsArr?: News[];\n  endOfNews: boolean;\n}\n\nconst initState: TopNewsState = {\n  loading: false,\n  error: undefined,\n  params: {\n    country: 'tw',\n    category: 'general',\n    q: '',\n    page: 1,\n    pageSize: 10,\n  },\n  newsArr: undefined,\n  endOfNews: false,\n}\n\nconst reducer = (state: TopNewsState = initState, action: Action): TopNewsState => {\n  switch (action.type) {\n    case FetchActionTypes.LOAD_TOP_NEWS_SUCCESS:\n      const { newsArr } = (action as NewsArrAction);\n      return {\n        ...state,\n        newsArr: state.newsArr\n          ? state.newsArr.concat(newsArr)\n          : newsArr,\n        endOfNews: newsArr.length <= 0\n      }\n    case FetchActionTypes.LOAD_TOP_NEWS_FAIL:\n      return {\n        ...state,\n        error: (action as ErrorAction).err\n      }\n    case TopNewsActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: (action as BooleanAction).value\n      }\n    case TopNewsActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: (action as ErrorAction).err\n      }\n    case TopNewsActionTypes.SET_PARAMS:\n      return {\n        ...state,\n        params: {\n          ...state.params,\n          ...(action as PartialTopNewsParamsAction).params\n        }\n      }\n    case TopNewsActionTypes.RESET_TOP_NEWS:\n      return {\n        ...state,\n        newsArr: initState.newsArr\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer;\n","import { combineReducers, applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport TopNews, { TopNewsState } from './TopNewsReducer';\n\nexport interface StoreState {\n  TopNews: TopNewsState;\n}\n\nconst store = createStore(\n  combineReducers<StoreState>({\n    TopNews,\n  }),\n  applyMiddleware(thunk)\n)\n\nexport default store;\n","import moment from \"moment\";\nimport { News } from '../data/News';\nimport { NetNews } from '../data/NetNews';\n\nexport default class NewsFactory {\n  static createNewsFromNet(netNews: NetNews): News {\n    return {\n      sourceId: netNews.source.id,\n      sourceName: netNews.source.name,\n      author: netNews.author,\n      title: netNews.title,\n      description: netNews.description,\n      url: netNews.url,\n      urlToImage: netNews.urlToImage,\n      publishedAt: moment(netNews.publishedAt),\n      content: netNews.content\n    };\n  }\n  static createNewsArrayFromNet(netNewsArr: NetNews[]): News[] {\n    return netNewsArr.map(netNews => this.createNewsFromNet(netNews));\n  }\n}\n","import { Action } from 'redux';\nimport axios from \"axios\";\nimport { FetchActionTypes } from './FetchActionTypes';\nimport NewsFactory from \"../data/NewsFactory\";\nimport { News } from '../data/News';\nimport { TopNewsParams } from '../reducers/TopNewsReducer';\nimport { ErrorAction } from '../types/base.type';\nimport { Dispatch, PromiseAction } from '../types/redux.type';\n\n\naxios.defaults.headers.common[\"X-Api-Key\"] = process.env.REACT_APP_NEWS_KEY;\nexport interface NewsArrAction extends Action {\n  newsArr: News[];\n}\n\nexport interface IFetchActions {\n  loadTopNewsArr(params: TopNewsParams): PromiseAction<any>;\n}\n\nexport default class FetchActions implements IFetchActions {\n\n  static _loadTopNewsArrStart = (): Action => {\n    return ({ type: FetchActionTypes.LOAD_TOP_NEWS_START });\n  }\n\n  static _loadTopNewsArrSucces(newsArr: News[]): NewsArrAction {\n    return ({ type: FetchActionTypes.LOAD_TOP_NEWS_SUCCESS, newsArr: newsArr });\n  };\n\n  static _loadTopNewsArrFail(err: Error): ErrorAction {\n    return ({ type: FetchActionTypes.LOAD_TOP_NEWS_FAIL, err: err });\n  };\n\n  loadTopNewsArr = (params: TopNewsParams): PromiseAction<any> => {\n    return async (dispatch: Dispatch): Promise<any> => {\n      dispatch(FetchActions._loadTopNewsArrStart())\n      await axios.get(\"https://newsapi.org/v2/top-headlines\", { params: params })\n        .then(response => {\n          const newsArr = NewsFactory.createNewsArrayFromNet(response.data.articles);\n          dispatch(FetchActions._loadTopNewsArrSucces(newsArr));\n          return newsArr;\n        })\n        .catch(err => {\n          dispatch(FetchActions._loadTopNewsArrFail(err));\n          throw err\n        });\n    }\n  }\n};\n","import React from 'react';\n\nconst LoadingDots = () => {\n  return (\n    <div className=\"loading-dots\">\n      <div className=\"loading-dots--dot\"></div>\n      <div className=\"loading-dots--dot\"></div>\n      <div className=\"loading-dots--dot\"></div>\n    </div>\n  )\n}\n\nexport default LoadingDots;\n","import React from 'react';\nimport { News } from '../data/News';\n\ninterface NewsGridProps {\n  news: News;\n}\n\nconst NewsGrid = (props: NewsGridProps) => {\n  const { news } = props;\n  return (\n    <div className=\"news-grid\">\n      <a href={news.url}>\n        <img src={news.urlToImage} alt=\"\" />\n        <p className=\"news-title\">{news.title}</p>\n      </a>\n    </div>\n  );\n};\n\nexport default NewsGrid;\n","import React from \"react\";\nimport { TopNewsProps } from '../container/TopNewsContainer';\nimport LoadingDots from './LoadingDots';\nimport NewsGrid from './NewsGrid';\n\nexport default class TopNews extends React.Component<TopNewsProps, {}> {\n  constructor(props: TopNewsProps) {\n    super(props);\n  }\n  componentDidMount() {\n    const { params, loadNews } = this.props;\n    loadNews(params);\n  }\n  loadMore = () => {\n    const { params, loadNews } = this.props;\n    const newParams = {\n      ...params,\n      page: params.page + 1\n    }\n    loadNews(newParams);\n  };\n\n  render(): JSX.Element {\n    const { loading, newsArr, endOfNews } = this.props;\n    const noWaterFall = 2;\n    const waterFalls = Array(noWaterFall)\n      .fill(0)\n      .map((e, i) => i + 1);\n    return (\n      <div className=\"news-grids\">\n        {waterFalls.map(waterFall => (\n          <div key={waterFall} className=\"waterfall\">\n            {newsArr && newsArr.map((news, index) => {\n              return index % noWaterFall === waterFall - 1 ? (\n                <NewsGrid key={news.url} news={news} />\n              ) : null;\n            })}\n          </div>\n        ))}\n        { !endOfNews &&\n          (\n            loading\n              ? <LoadingDots/>\n              : <span className=\"news-status\" onClick={this.loadMore}>Load More</span>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n\n","import { StoreState } from '../reducers/store';\nimport TopNewsActionos from '../actions/TopNewsActions';\nimport { TopNewsParams } from '../reducers/TopNewsReducer';\nimport { News } from '../data/News';\nimport { connect } from 'react-redux';\nimport TopNews from '../components/TopNews';\n\ninterface StateProps {\n  loading: boolean;\n  params: TopNewsParams;\n  newsArr?: News[];\n  endOfNews: boolean;\n}\n\ninterface DispatchProps {\n  resetNews: () => void;\n  loadNews: (params: TopNewsParams) => void;\n}\n\nexport type TopNewsProps = StateProps & DispatchProps;\n\nconst mapStateToProps = (state: StoreState): StateProps => ({\n  loading: state.TopNews.loading,\n  params: state.TopNews.params,\n  newsArr: state.TopNews.newsArr,\n  endOfNews: state.TopNews.endOfNews\n})\n\nconst topNewAction = new TopNewsActionos();\nconst mapDispatchToProps: DispatchProps = {\n  resetNews: () => topNewAction.resetTopNews(),\n  loadNews: (params: TopNewsParams) => topNewAction.loadTopNews(params)\n}\n\nexport default connect<StateProps, DispatchProps, {}, StoreState>(\n  mapStateToProps,\n  mapDispatchToProps\n)(TopNews)\n","import { Action } from 'redux';\nimport { TopNewsActionTypes } from './TopNewsActionTypes';\nimport { TopNewsParams } from '../reducers/TopNewsReducer';\nimport { BooleanAction, ErrorAction } from '../types/base.type';\nimport FetchActions, { IFetchActions } from './FetchActions';\nimport { Dispatch, PromiseAction } from '../types/redux.type';\n\nexport interface PartialTopNewsParamsAction extends Action {\n  params: Partial<TopNewsParams>;\n}\n\nexport interface ITopNewsActionos {\n  setLoading: (value: boolean) => BooleanAction;\n  setError: (value: Error) => ErrorAction;\n  setParams: (params: Partial<TopNewsParams>) => PartialTopNewsParamsAction;\n  loadTopNews: (params: TopNewsParams) => PromiseAction;\n};\n\nexport default class TopNewsActionos implements ITopNewsActionos {\n\n  private fetchActions: IFetchActions;\n\n  constructor() {\n    this.fetchActions = new FetchActions();\n  }\n  setLoading = (value: boolean) => {\n    return ({\n      type: TopNewsActionTypes.SET_LOADING,\n      value: value\n    })\n  }\n\n  setError = (err: Error) => {\n    return ({\n      type: TopNewsActionTypes.SET_ERROR,\n      err: err\n    })\n  }\n\n  setParams = (params: Partial<TopNewsParams>) => {\n    return ({\n      type: TopNewsActionTypes.SET_PARAMS,\n      params: params\n    })\n  }\n\n  resetTopNews = (): Action => {\n    return ({\n      type: TopNewsActionTypes.RESET_TOP_NEWS\n    })\n  }\n\n  loadTopNews = (params: TopNewsParams): PromiseAction => {\n    return async (dispatch: Dispatch): Promise<void> => {\n      dispatch(this.setLoading(true))\n      try {\n        dispatch(this.setParams(params))\n        await dispatch(this.fetchActions.loadTopNewsArr(params));\n        dispatch(this.setLoading(false))\n      } catch (err) {\n        dispatch(this.setLoading(false))\n        throw(err)\n      }\n    }\n  }\n}\n","import React from \"react\";\n\nexport interface StateProps {\n  country: string;\n  category: string;\n}\n\ntype HeaderProps = StateProps;\n\nconst Header = (props: HeaderProps) => {\n  const { category, country } = props;\n  return (\n    <div className=\"header\">\n      <img src=\"https://newsapi.org/favicon-32x32.png\"></img>\n      <h3>{`${category.toUpperCase()} IN ${country}`}</h3>\n    </div>\n  );\n}\n\nexport default Header;\n","import Header, { StateProps } from '../components/Header';\nimport { StoreState } from '../reducers/store';\nimport { connect } from 'react-redux';\n\nconst countryName:{[key in string]: string} = {\n  tw: 'TAIWAN'\n}\n\nconst mapStateToProps = (state: StoreState): StateProps => ({\n  category: state.TopNews.params.category,\n  country: countryName[state.TopNews.params.country]\n})\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(Header)\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport store from './reducers/store';\nimport TopNewsContainer from './container/TopNewsContainer';\n\nimport \"./styles.scss\";\nimport HeaderContainer from './container/HeaderContainer';\n\nconst App = () => {\n  return (\n    <div id=\"App\">\n      <Provider store={store}>\n        <HeaderContainer />\n        <TopNewsContainer />\n      </Provider>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}